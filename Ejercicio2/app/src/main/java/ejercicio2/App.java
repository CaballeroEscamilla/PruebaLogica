/*
 * This source file was generated by the Gradle 'init' task
 */
package ejercicio2;

import java.util.Scanner;

public class App {
    public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    System.out.println("Introduce la descripcion de los años:");
    String descripcion = scanner.nextLine();
    Intervalo intervalo = parseIntervalo(descripcion);
    int minimumCharacters = intervalo.findYearWithMostRomanCharacters();
    System.out.println("El número de caracteres mínimos para guardar los años es: " + minimumCharacters);
    }

    public static Intervalo parseIntervalo(String descripcion) {
        String[] partes = descripcion.split("-");
        if (partes.length != 2) {
            throw new IllegalArgumentException("Formato de intervalo incorrecto. Debe ser 'inicio-fin'.");
        }
        StartYear inicio = createStartYear(partes[0].trim());
        EndYear fin = createEndYear(partes[1].trim(), inicio.isBC);
        if (!isValidYear(inicio, fin)) {
            throw new IllegalArgumentException("El año de inicio no debe ser mayor que el año de fin en era AD, ni menor que el año de fin en era BC");
                }
        return new Intervalo(inicio, fin);
    }

    public static StartYear createStartYear(String parte) {
        if (parte == null || parte.length() < 3) { 
            throw new IllegalArgumentException("El año de inicio está vacío o es demasiado corto.");
        }

        boolean inicioIsBC;
        String era = parte.substring(parte.length() - 2).toUpperCase();

        if (era.equals("BC")) {
            inicioIsBC = true;
        } else if (era.equals("AD")) {
            inicioIsBC = false;
        } else {
            throw new IllegalArgumentException("El año de inicio debe terminar en 'BC' o 'AD'.");
        }

        String yearStr = parte.substring(0, parte.length() - 2).trim();

        if (!yearStr.matches("\\d+")) {
            throw new IllegalArgumentException("El año de inicio debe contener solo números antes de 'BC' o 'AD'.");
        }

        if (yearStr.length() > 4) {
            throw new IllegalArgumentException("El año de inicio no puede tener más de 4 dígitos.");
        }

        int startYear = Integer.parseInt(yearStr);

        if (startYear == 0) {
            throw new IllegalArgumentException("El año de inicio no puede ser 0.");
        }

        return new StartYear(startYear, inicioIsBC);
    }

    public static EndYear createEndYear(String parte, boolean initisBC) {
    if (parte.length() < 3) {
        throw new IllegalArgumentException("El año debe incluir el número seguido de 'BC' o 'AD'.");
    }

    String era = parte.substring(parte.length() - 2).toUpperCase();
    String numeroStr = parte.substring(0, parte.length() - 2).trim();

    if (!numeroStr.matches("\\d+")) {
        throw new IllegalArgumentException("El año debe contener solo números antes de 'BC' o 'AD'.");
    }

    int year = Integer.parseInt(numeroStr);

    boolean finIsBC;
    if ("BC".equals(era) && initisBC) {
        finIsBC = true;
        if (year < 1 || year > 753) {
            throw new IllegalArgumentException("El año BC debe estar entre 1 y 753.");
        }
    } else if ("AD".equals(era)) {
        finIsBC = false;
        if (year < 1 || year > 2012) {
            throw new IllegalArgumentException("El año AD debe estar entre 1 y 2012.");
        }
    } else {
        throw new IllegalArgumentException("El año de fin debe terminar en 'BC' o 'AD'.");
    }

    return new EndYear(year, finIsBC);
}

    public static boolean isValidYear(StartYear start, EndYear end) {
        if (start.isBC && end.isBC && start.startYear <= 753 && end.endYear > 0) {
            return start.startYear >= end.endYear;
        } else if (!start.isBC && !end.isBC && start.startYear > 0 && end.endYear <= 2012) {
            return start.startYear <= end.endYear;
        } else if(start.startYear <= 753 && start.startYear > 0 && end.endYear > 0 && end.endYear <= 2012) {
            return true;
        }
        return false;
    }
}
